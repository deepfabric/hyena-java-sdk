syntax = "proto2";

import "meta.proto";

option java_multiple_files = true;
option java_package = "io.aicloud.sdk.hyena.pb";
option java_outer_classname = "HyenaRPCPB";
option objc_class_prefix = "HLW";

package rpc;

// MsgType msg type
enum MsgType {
    MsgSearchReq = 0;
    MsgSearchRsp = 1;
    MsgInsertReq = 2;
    MsgInsertRsp = 3;
    MsgUpdateReq = 4;
    MsgUpdateRsp = 5;
    MsgErrorRsp  = 6;
    MsgAdmin     = 7;
}

// SearchRequest search request
message SearchRequest {
    optional bytes  id      = 1;
    optional uint64 db      = 2;
    repeated float  xq      = 3;
    optional int64  offset  = 4;
    optional bool   last    = 5;
}

// SearchResponse search response
message SearchResponse {
    optional bytes  id         = 1;
    repeated float  distances  = 2;
    repeated int64  xids       = 3;
    optional uint64 db         = 4;
    optional bool   searchNext = 5;
}

// InsertRequest insert request
message InsertRequest {
    optional bytes  id     = 1;
    repeated float  xbs    = 2;
    repeated int64  ids    = 3;
    optional int64  offset = 4;
}

// InsertResponse insert response
message InsertResponse {
    optional bytes id = 1;
}

// UpdateRequest insert request
message UpdateRequest {
    optional bytes  id  = 1;
    optional uint64 db  = 2;
    repeated float  xbs = 3;
    repeated int64  ids = 4;
}

// UpdateResponse update response
message UpdateResponse {
    optional bytes id = 1;
}

// ErrResponse error response
message ErrResponse {
    optional bytes             id                = 1;
    optional string            message           = 2;
    optional NotLeader         notLeader         = 3;
    optional DBNotFound        dbNotFound        = 4;
    optional StaleEpoch        staleEpoch        = 5;
    optional ServerIsBusy      serverIsBusy      = 6;
    optional StaleCommand      staleCommand      = 7;
    optional StoreNotMatch     storeNotMatch     = 8;
    optional RaftEntryTooLarge raftEntryTooLarge = 9;
}

message NotLeader {
    optional uint64    id     = 1;
    optional meta.Peer leader = 2;
}

message StoreNotMatch {}

message ServerIsBusy {}

message StaleCommand {}

message DBNotFound {
    optional uint64 id = 1;
}

message StaleEpoch {
    repeated meta.VectorDB newDBs = 1;
}

message RaftEntryTooLarge {
    optional uint64 id        = 1;
    optional uint64 entrySize = 2;
}